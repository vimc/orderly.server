% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runner.R
\name{orderly_runner_}
\alias{orderly_runner_}
\title{Object for managing running jobs on the redis queue}
\description{
Object for managing running jobs on the redis queue

Object for managing running jobs on the redis queue
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{root}}{Orderly root}

\item{\code{config}}{Orderly config}

\item{\code{allow_ref}}{Allow git to change branch/ref for run}

\item{\code{has_git}}{Is git available on the runner}

\item{\code{con}}{Redis connection}

\item{\code{cleanup_on_exit}}{If TRUE workers are killed on exit}

\item{\code{queue}}{The redis queue}

\item{\code{queue_id}}{Redis queue ID}

\item{\code{keys}}{Set of redis keys for mapping between key, report_id
and task_id}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{orderly_runner_$new()}}
\item \href{#method-start_workers}{\code{orderly_runner_$start_workers()}}
\item \href{#method-submit_task_report}{\code{orderly_runner_$submit_task_report()}}
\item \href{#method-submit}{\code{orderly_runner_$submit()}}
\item \href{#method-status}{\code{orderly_runner_$status()}}
\item \href{#method-check_timeout}{\code{orderly_runner_$check_timeout()}}
\item \href{#method-kill}{\code{orderly_runner_$kill()}}
\item \href{#method-destroy}{\code{orderly_runner_$destroy()}}
\item \href{#method-cleanup}{\code{orderly_runner_$cleanup()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create object, read configuration and setup redis connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$new(
  root,
  allow_ref = NULL,
  backup_period,
  queue_id,
  workers,
  cleanup_on_exit = workers > 0,
  worker_timeout = Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{root}}{Orderly root.}

\item{\code{allow_ref}}{Allow git to change branches/ref for run.  If not
given, then we will look to see if the orderly configuration
disallows branch changes (based on the
\code{ORDERLY_API_SERVER_IDENTITY} environment variable and the
\code{master_only} setting of the relevant server block.}

\item{\code{backup_period}}{Period (in seconds) between DB backups.  This
is a guide only as backups cannot happen while a task is running
- if more than this many seconds have elapsed when the runner is
in its idle loop a backup of the db will be performed.  This
creates a copy of orderly's destination database in
\code{backup/db} with the same filename as the destination
database, even if that database typically lives outside of the
orderly tree.  In case of corruption of the database, this
backup can be manually moved into place.  This is only needed if
you are storing information alongside the core orderly tables
(as done by OrderlyWeb).
TODO: actually implement this}

\item{\code{queue_id}}{ID of an existing queue to connect to, creates a new one
if NULL.}

\item{\code{workers}}{Number of workers to spawn.}

\item{\code{cleanup_on_exit}}{If TRUE workers are killed on exit.}

\item{\code{worker_timeout}}{How long worker should live for before it is
killed. Expect this is only finite during local testing.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start_workers"></a>}}
\if{latex}{\out{\hypertarget{method-start_workers}{}}}
\subsection{Method \code{start_workers()}}{
Start n workers for this queue and optionally set a timeout.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$start_workers(workers, timeout)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Number of workers to spawn.}

\item{\code{timeout}}{How long worker should live for before it is
killed. Expect this is only finite during local testing.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE, called for side effects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-submit_task_report"></a>}}
\if{latex}{\out{\hypertarget{method-submit_task_report}{}}}
\subsection{Method \code{submit_task_report()}}{
Queue a job to run an orderly report.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$submit_task_report(
  name,
  parameters = NULL,
  ref = NULL,
  instance = NULL,
  poll = 0.1,
  timeout = 10800
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of report to be queued.}

\item{\code{parameters}}{List of parameters to pass to report.}

\item{\code{ref}}{The git sha to run the report.}

\item{\code{instance}}{The db instance for the report to pull data from.}

\item{\code{poll}}{How frequently to poll for the report ID being available.}

\item{\code{timeout}}{Timeout for the report run default 3 hours.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The key for the job, note this is not the task id. The task id
can be retrieved from redis using the key.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-submit"></a>}}
\if{latex}{\out{\hypertarget{method-submit}{}}}
\subsection{Method \code{submit()}}{
Submit an arbitrary job on the queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$submit(job, environment = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job}}{A quoted R expression.}

\item{\code{environment}}{Environment to run the expression in.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Task id
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-status"></a>}}
\if{latex}{\out{\hypertarget{method-status}{}}}
\subsection{Method \code{status()}}{
Get the status of a job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$status(key, output = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The job key.}

\item{\code{output}}{If TRUE include the output from job running.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing the key, status, report_id (if available),
output and the position of the job in the queue.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_timeout"></a>}}
\if{latex}{\out{\hypertarget{method-check_timeout}{}}}
\subsection{Method \code{check_timeout()}}{
Check if any running tasks have passed their timeouts. This is run
by the API on a preroute - we check for timeouts everytime someone
interacts with the API. Not intended to be run directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$check_timeout()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List of killed reports.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-kill"></a>}}
\if{latex}{\out{\hypertarget{method-kill}{}}}
\subsection{Method \code{kill()}}{
Kill a job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$kill(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The job key.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-destroy"></a>}}
\if{latex}{\out{\hypertarget{method-destroy}{}}}
\subsection{Method \code{destroy()}}{
Destroy the queue. Not expected to be called directly, used in tests.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$destroy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cleanup"></a>}}
\if{latex}{\out{\hypertarget{method-cleanup}{}}}
\subsection{Method \code{cleanup()}}{
Cleanup workers and destroy the queue. Not expected to be called
directly, gets registered as finaliser of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$cleanup()}\if{html}{\out{</div>}}
}

}
}
