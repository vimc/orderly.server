% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runner.R
\name{orderly_runner_}
\alias{orderly_runner_}
\title{Object for managing running jobs on the redis queue}
\description{
Object for managing running jobs on the redis queue

Object for managing running jobs on the redis queue
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{root}}{Orderly root}

\item{\code{identity}}{Remote identity, as listed in orderly_config.yml}

\item{\code{config}}{Orderly config}

\item{\code{allow_ref}}{Allow git to change branch/ref for run}

\item{\code{default_branch}}{Default git branch}

\item{\code{con}}{Redis connection}

\item{\code{cleanup_on_exit}}{If TRUE workers are killed on exit}

\item{\code{queue}}{The redis queue}

\item{\code{queue_id}}{Redis queue ID}

\item{\code{keys}}{Set of redis keys for mapping between key, report_id
and task_id}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-orderly_runner-new}{\code{orderly_runner_$new()}}
\item \href{#method-orderly_runner-reload}{\code{orderly_runner_$reload()}}
\item \href{#method-orderly_runner-start_workers}{\code{orderly_runner_$start_workers()}}
\item \href{#method-orderly_runner-assert_ref_switching_allowed}{\code{orderly_runner_$assert_ref_switching_allowed()}}
\item \href{#method-orderly_runner-submit_task_report}{\code{orderly_runner_$submit_task_report()}}
\item \href{#method-orderly_runner-submit}{\code{orderly_runner_$submit()}}
\item \href{#method-orderly_runner-submit_workflow}{\code{orderly_runner_$submit_workflow()}}
\item \href{#method-orderly_runner-status}{\code{orderly_runner_$status()}}
\item \href{#method-orderly_runner-workflow_status}{\code{orderly_runner_$workflow_status()}}
\item \href{#method-orderly_runner-queue_status}{\code{orderly_runner_$queue_status()}}
\item \href{#method-orderly_runner-check_timeout}{\code{orderly_runner_$check_timeout()}}
\item \href{#method-orderly_runner-kill}{\code{orderly_runner_$kill()}}
\item \href{#method-orderly_runner-destroy}{\code{orderly_runner_$destroy()}}
\item \href{#method-orderly_runner-cleanup}{\code{orderly_runner_$cleanup()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-new"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-new}{}}}
\subsection{Method \code{new()}}{
Create object, read configuration and setup redis connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$new(
  root,
  identity,
  queue_id,
  workers,
  cleanup_on_exit = workers > 0,
  worker_timeout = Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{root}}{Orderly root.}

\item{\code{identity}}{Remote identity, as listed in orderly_config.yml}

\item{\code{queue_id}}{ID of an existing queue to connect to, creates a new one
if NULL.}

\item{\code{workers}}{Number of workers to spawn.}

\item{\code{cleanup_on_exit}}{If TRUE workers are killed on exit.}

\item{\code{worker_timeout}}{How long worker should live for before it is
killed. Expect this is only finite during local testing.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-reload"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-reload}{}}}
\subsection{Method \code{reload()}}{
Re-read configuration and set options
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$reload()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-start_workers"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-start_workers}{}}}
\subsection{Method \code{start_workers()}}{
Start n workers for this queue and optionally set a timeout.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$start_workers(workers, timeout)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Number of workers to spawn.}

\item{\code{timeout}}{How long worker should live for before it is
killed. Expect this is only finite during local testing.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE, called for side effects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-assert_ref_switching_allowed"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-assert_ref_switching_allowed}{}}}
\subsection{Method \code{assert_ref_switching_allowed()}}{
Check if ref switching is allowed in this runner. Errors if
ref is non NULL and ref switching disallowed, otherwise
does nothing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$assert_ref_switching_allowed(ref)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ref}}{Input ref to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE, called for side effects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-submit_task_report"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-submit_task_report}{}}}
\subsection{Method \code{submit_task_report()}}{
Queue a job to run an orderly report.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$submit_task_report(
  name,
  parameters = NULL,
  ref = NULL,
  instance = NULL,
  changelog = NULL,
  poll = 0.1,
  timeout = 60 * 60 * 3,
  depends_on = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of report to be queued.}

\item{\code{parameters}}{List of parameters to pass to report.}

\item{\code{ref}}{The git sha to run the report.}

\item{\code{instance}}{The db instance for the report to pull data from.}

\item{\code{changelog}}{Description of changes to the report.}

\item{\code{poll}}{How frequently to poll for the report ID being available.}

\item{\code{timeout}}{Timeout for the report run default 3 hours.}

\item{\code{depends_on}}{Keys of any tasks which this report depends on}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The key for the job, note this is not the task id. The task id
can be retrieved from redis using the key.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-submit"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-submit}{}}}
\subsection{Method \code{submit()}}{
Submit an arbitrary job on the queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$submit(expr, depends_on = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{A quoted R expression.}

\item{\code{depends_on}}{Task ids for any dependencies of this job.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Task id
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-submit_workflow"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-submit_workflow}{}}}
\subsection{Method \code{submit_workflow()}}{
Queue a workflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$submit_workflow(
  reports,
  ref = NULL,
  changelog = NULL,
  poll = 0.1,
  timeout = 60 * 60 * 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reports}}{Details of reports to be run.}

\item{\code{ref}}{The git sha to run the workflow.}

\item{\code{changelog}}{Description of changes to the reports - applied to
all reports.}

\item{\code{poll}}{How frequently to poll for the report ID being available.
Applied to each of the reports run in the workflow}

\item{\code{timeout}}{Timeout for each of the reports run as part
of the workflow default 3 hours.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The key for the workflow and each individual report
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-status"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-status}{}}}
\subsection{Method \code{status()}}{
Get the status of a job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$status(key, output = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The job key.}

\item{\code{output}}{If TRUE include the output from job running.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing the key, status, report_id (if available),
output and the position of the job in the queue.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-workflow_status"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-workflow_status}{}}}
\subsection{Method \code{workflow_status()}}{
Get the status of a workflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$workflow_status(workflow_key, output = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workflow_key}}{The workflow key.}

\item{\code{output}}{If TRUE include the output from each job in the workflow.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing the workflow_key, status and status of each
job in the workflow.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-queue_status"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-queue_status}{}}}
\subsection{Method \code{queue_status()}}{
Get the running and queued tasks in front of key in the queue.

If \code{key} is NULL then includes all queued tasks.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$queue_status(key = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The job key, if NULL returns all queued tasks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing the key, status and report name of any
running tasks and any queued tasks in front of key in the queue.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-check_timeout"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-check_timeout}{}}}
\subsection{Method \code{check_timeout()}}{
Check if any running tasks have passed their timeouts. This is run
by the API on a preroute - we check for timeouts everytime someone
interacts with the API. Not intended to be run directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$check_timeout()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List of killed reports.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-kill"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-kill}{}}}
\subsection{Method \code{kill()}}{
Kill a job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$kill(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The job key.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-destroy"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-destroy}{}}}
\subsection{Method \code{destroy()}}{
Destroy the queue. Not expected to be called directly, used in tests.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$destroy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderly_runner-cleanup"></a>}}
\if{latex}{\out{\hypertarget{method-orderly_runner-cleanup}{}}}
\subsection{Method \code{cleanup()}}{
Cleanup workers and destroy the queue. Not expected to be called
directly, gets registered as finaliser of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{orderly_runner_$cleanup()}\if{html}{\out{</div>}}
}

}
}
