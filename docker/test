#!/usr/bin/env bash
set -ex
HERE=$(dirname $0)
. $HERE/common

NAME_SERVER=orderly_server
NAME_REDIS=orderly_server_redis
NAME_NETWORK=orderly_server_network

function cleanup {
  echo "Cleaning up"
  docker kill $NAME_REDIS > /dev/null || true
  docker kill $NAME_SERVER > /dev/null || true
  docker kill $NAME_TESTS > /dev/null || true
  docker network rm $NAME_NETWORK > /dev/null || true
  rm -rf $PACKAGE_ROOT/orderly-demo
}

trap cleanup EXIT

rm -rf orderly-demo
git clone https://github.com/vimc/orderly-demo
mkdir -p orderly-demo/runner/log
mkdir -p orderly-demo/runner/id

docker network create $NAME_NETWORK

docker run --rm -d --network=$NAME_NETWORK --network-alias=redis \
    --name $NAME_REDIS redis

docker run --rm --network=$NAME_NETWORK \
       -e REDIS_URL=redis://redis:6379 \
       -e PKGAPI_VALIDATE=true \
       --name $NAME_TESTS $TAG_TESTS \
       /usr/local/bin/R CMD check --as-cran orderly.server_$PACKAGE_VERSION.tar.gz


docker run --rm -d --network=$NAME_NETWORK \
    -e REDIS_URL=redis://redis:6379 \
    -p 8321:8321 \
    --mount type=bind,src=$PACKAGE_ROOT/orderly-demo,dst=/demo \
    --name $NAME_SERVER $TAG_SHA demo


for attempt in $(seq 10); do
    echo "Attempt $attempt"
    ## Sleep first here as otherwise receive an error
    ## curl: (56) Recv failure: Connection reset by peer
    ## which exists instantly
    sleep 2
    RESPONSE=$(curl --silent --write-out "%{http_code}\n" --output /dev/null \
               http://localhost:8321)
    if [ "$RESPONSE" == "200" ]; then
        echo "SUCCESS"
        exit 0
    fi
done

echo "FAIL"
exit 1
