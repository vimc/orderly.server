#!/usr/bin/env bash
PACKAGE_ROOT=$(realpath $HERE/..)
PACKAGE_NAME=orderly.server
PACKAGE_ORG=vimc
PACKAGE_VERSION=$(cat $PACKAGE_ROOT/DESCRIPTION |
    grep '^Version:' | sed 's/^.*: *//')

# Buildkite doesn't check out a full history from the remote (just the
# single commit) so you end up with a detached head and git rev-parse
# doesn't work
if [ "$BUILDKITE" = "true" ]; then
    GIT_SHA=${BUILDKITE_COMMIT:0:7}
else
    GIT_SHA=$(git -C "$PACKAGE_ROOT" rev-parse --short=7 HEAD)
fi

if [ "$TRAVIS" = "true" ]; then
    GIT_BRANCH=$TRAVIS_BRANCH
elif [ "$BUILDKITE" = "true" ]; then
    GIT_BRANCH=$BUILDKITE_BRANCH
else
    GIT_BRANCH=$(git -C "$PACKAGE_ROOT" symbolic-ref --short HEAD)
fi

TAG_SHA="${PACKAGE_ORG}/${PACKAGE_NAME}:${GIT_SHA}"
TAG_BRANCH="${PACKAGE_ORG}/${PACKAGE_NAME}:${GIT_BRANCH}"
TAG_LATEST="${PACKAGE_ORG}/${PACKAGE_NAME}:latest"

## ORDERLY_VERSION can be set as an env var to trigger a build
## of orderly.server with a specific version of orderly. If
## the orderly version is not the default branch then use a
## combined tag so that we never replace an existing tagged
## image built off master with an image with a different
## version of orderly installed
ORDERLY_VERSION="${ORDERLY_VERSION:-vimc-7135}"
if [ "$ORDERLY_VERSION" != "master" ]; then
    TAG_SHA="$TAG_SHA-$ORDERLY_VERSION"
    buildkite-agent meta-data set "orderly-server-sha" $TAG_SHA
fi
